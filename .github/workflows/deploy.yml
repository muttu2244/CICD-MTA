name: Deploy Mediobanca App

on:
  push:
    branches:
      - main

env:
  APP_NAME: Mediobanca
  DEPLOY_FILE: deployAutoScale3.yml
  NAMESPACE: cicd-mediobanca
  HOSTED_ZONE_NAME: apps-aws.com
  AWS_REGION: us-east-1
  ECR_REPOSITORY: demos
  IMAGE_TAG: mediobanca-v2
  EKS_CLUSTER_NAME: dev-eks-2
  APP_FOLDER: Mediobanca
  REQUIREMENTS_FILE: requirements.txt
  AWS_ACCOUNT_ID: 339049388387

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Update kubeconfig for EKS cluster
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | \
          docker login --username AWS --password-stdin \
          ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      - name: Build Docker image
        run: |
          docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to EKS
        run: |
          kubectl apply -f ${{ env.DEPLOY_FILE }}

      - name: Create Route 53 DNS Record
        env:
          NAMESPACE: ${{ env.NAMESPACE }}
          HOSTED_ZONE_NAME: ${{ env.HOSTED_ZONE_NAME }}
        run: |
          echo "Fetching Ingress ELB hostname..."

          for i in {1..20}; do
            export INGRESS_HOST=$(kubectl get ingress app-mediobanca-ingress -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null | sed "s/'//g")
            
            if [ -n "$INGRESS_HOST" ]; then
              echo "Found Ingress Host: $INGRESS_HOST"
              break
            fi
            
            echo "Waiting for ELB hostname... retry $i"
            sleep 15
          done
          
          if [ -z "$INGRESS_HOST" ]; then
            echo "ERROR: Ingress hostname not found after waiting. Exiting."
            exit 1
          fi
          
          echo "Constructing DNS record: ${NAMESPACE}.${HOSTED_ZONE_NAME} -> $INGRESS_HOST"
          
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name --dns-name $HOSTED_ZONE_NAME --query "HostedZones[0].Id" --output text | sed 's|/hostedzone/||')
          
          cat > dns-record.json <<EOF
          {
            "Comment": "Create record for $NAMESPACE",
            "Changes": [
              {
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "${NAMESPACE}.${HOSTED_ZONE_NAME}",
                  "Type": "CNAME",
                  "TTL": 300,
                  "ResourceRecords": [
                    {
                      "Value": "$INGRESS_HOST"
                    }
                  ]
                }
              }
            ]
          }
          EOF
          
          aws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --change-batch file://dns-record.json
